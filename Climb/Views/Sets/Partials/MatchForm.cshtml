@using Climb.ViewModels.Matches
@using Climb.ViewModels.Sets
@using Microsoft.AspNetCore.Hosting
@model MatchFormViewModel
@inject IHostingEnvironment environment

<link href="/css/fight.css" rel="Stylesheet" type="text/css"/>
<script type="text/javascript" src="@Url.Content("/js/set.js")"></script>

<div>
    <div>
        <input type="hidden" value="@Model.index" name="matches[@Model.index].index"/>

        <table>
            <tr>
                <td class="match-form-score">
                    @Html.Partial("~/Views/Sets/Partials/MatchScoreInput.cshtml", new MatchScoreInputViewModel(Model.player1Score, Model.index, 1))
                </td>
                @{
                    var characters = Model.set.League.Game.Characters.OrderBy(c => c.Name).ToList();
                    var characterInputCount = 0;

                    foreach(var character in Model.player1Characters)
                    {
                        <td class="match-form-character">
                            @Html.Partial("~/Views/Sets/Partials/MatchCharacterInput.cshtml", new MatchCharacterInputModelView(characterInputCount, character, characters, Model.index, Model.set.Player1ID.Value))
                        </td>
                        ++characterInputCount;
                    }
                }
                <td class="match-form-score">
                    @Html.Partial("~/Views/Sets/Partials/MatchScoreInput.cshtml", new MatchScoreInputViewModel(Model.player2Score, Model.index, 2))
                </td>
                @{
                    foreach(var character in Model.player2Characters)
                    {
                        <td class="match-form-character">
                            @Html.Partial("~/Views/Sets/Partials/MatchCharacterInput.cshtml", new MatchCharacterInputModelView(characterInputCount, character, characters, Model.index, Model.set.Player2ID.Value))
                        </td>
                        ++characterInputCount;
                    }
                }

                @if(Model.set.League.Game.RequireStage)
                {
                    <td class="match-form-stage">
                        @{ var stages = Model.set.League.Game.Stages.OrderBy(c => c.Name).ToList(); }
                        @Html.Partial("~/Views/Sets/Partials/MatchStageInput.cshtml", new MatchStageInputViewModel(Model.index, Model.stage, stages))
                    </td>
                }

                @if(!Model.set.IsLocked)
                {
                    <td>
                        <button type="button" onclick="removeMatch(@Model.index)">X</button>
                    </td>
                }
            </tr>
        </table>
    </div>
</div>
