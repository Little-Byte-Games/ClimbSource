@using System.Diagnostics
@using Climb.ViewModels.Matches
@using Climb.ViewModels.Sets
@using Microsoft.AspNetCore.Hosting
@model MatchFormViewModel
@inject IHostingEnvironment environment

<script type="text/javascript" src="@Url.Content("/js/set.js")"></script>

@{
    var characters = Model.set.League.Game.Characters.OrderBy(c => c.Name).ToList();
    var characterInputCount = 0;
}

<div class="match-form-container">
    <input type="hidden" value="@Model.index" name="matches[@Model.index].index"/>
    <div class="match-form-inputs">
        <div>
            <div class="match-form-playerdata">
                <span class="match-form-player">P1</span>
                <div class="pad-right">
                    @Html.Partial("~/Views/Sets/Partials/MatchScoreInput.cshtml", new MatchScoreInputViewModel(Model.player1Score, Model.index, 1, Model.set.League.Game.MaxMatchPoints))
                </div>
                <div class="match-form-characters pad-right">
                    @foreach(var character in Model.player1Characters)
                    {
                        Debug.Assert(Model.set.Player1ID != null, "Model.set.Player1ID != null");
                        @Html.Partial("~/Views/Sets/Partials/MatchCharacterInput.cshtml", new MatchCharacterInputModelView(characterInputCount, character, characters, Model.index, Model.set.Player1ID.Value))
                        ++characterInputCount;
                    }
                </div>
            </div>
            <div class="match-form-playerdata">
                <span class="match-form-player">P2</span>
                <div class="pad-right">
                    @Html.Partial("~/Views/Sets/Partials/MatchScoreInput.cshtml", new MatchScoreInputViewModel(Model.player2Score, Model.index, 2, Model.set.League.Game.MaxMatchPoints))
                </div>
                <div class="match-form-characters pad-right">
                    @foreach(var character in Model.player2Characters)
                    {
                        Debug.Assert(Model.set.Player2ID != null, "Model.set.Player2ID != null");
                        @Html.Partial("~/Views/Sets/Partials/MatchCharacterInput.cshtml", new MatchCharacterInputModelView(characterInputCount, character, characters, Model.index, Model.set.Player2ID.Value))
                        ++characterInputCount;
                    }
                </div>
            </div>
        </div>
        @if(Model.set.League.Game.RequireStage)
        {
            <div class="match-form-stage">
                @{ var stages = Model.set.League.Game.Stages.OrderBy(c => c.Name).ToList(); }
                @Html.Partial("~/Views/Sets/Partials/MatchStageInput.cshtml", new MatchStageInputViewModel(Model.index, Model.stage, stages))
            </div>
        }
    </div>
    <button class="match-form-remove" type="button" onclick="removeMatch(@Model.index)">X</button>
</div>
