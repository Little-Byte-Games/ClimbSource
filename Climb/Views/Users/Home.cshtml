@using Climb.Services
@using Climb.ViewModels
@using Climb.ViewModels.LeagueUsers
@model CompeteHomeViewModel
@inject CdnService cdnService
@inject ILeagueUserService leagueUserService

@{
    ViewBag.Title = Model.homeUser.Username;
    Layout = "_HomeLayout";
    var returnUrl = Url.Action("Home", "Users", new { Model.homeUser.ID });
}

@section Styles {
    <link href="/css/user/home.css" type="text/css" rel="stylesheet" />
    <link href="/css/season.css" type="text/css" rel="stylesheet" />
    <link href="/css/leagueuser/powerrank.css" type="text/css" rel="stylesheet" />
}

@section Body_Banner {
    <div>
        <img class="user-header-image" src="@Model.profileBannerUrl" />
        <div class="profile">
            <img class="profile-image" src="@Model.profilePicUrl" />
            <span class="profile-username">@Model.homeUser.Username</span>
        </div>
    </div>
}

@section User_Content_Left {
    <h3>Status</h3>
    <h4>Leagues</h4>
    <div>
        @{ var i = 0; }
        @foreach (var leagueUser in Model.homeUser.LeagueUsers)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{ var viewModel = await PowerRankViewModel.Create(leagueUser, Model.user, cdnService, leagueUserService, true); }
                @await Html.PartialAsync("~/Views/LeagueUsers/Partials/PowerRank.cshtml", viewModel)
            </div>
            ++i;
        }
    </div>
    <h4>Seasons</h4>
    <div>
        @{ i = 0; }
        @foreach (var seasonUser in Model.seasons)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @Html.Partial("~/Views/Seasons/Partials/SeasonStanding.cshtml", seasonUser)
            </div>
            ++i;
        }
    </div>
}

@section User_Content_Middle {
    <h3>Activity</h3>
}

@section User_Content_Right {
    <h3>Sets</h3>
    <h4>Overdue</h4>
    @foreach (var set in Model.overdueSets)
    {
        var viewModel = new SetCollapsedViewModel(set.set, set.leagueUser, returnUrl);
        @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
    }
    <h4>Available</h4>
    @{ var i = 0; }
    @foreach (var set in Model.availableSets)
    {
        var row = i % 2 == 0 ? "row-even" : "row-odd";
        var viewModel = new SetCollapsedViewModel(set.set, set.leagueUser, returnUrl);
        <div class="@row">
            @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
        </div>
        ++i;
    }
}