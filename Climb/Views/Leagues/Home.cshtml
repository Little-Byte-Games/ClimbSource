@using Climb.Services
@using Climb.ViewModels
@using Climb.ViewModels.LeagueUsers
@model LeagueHomeViewModel
@inject ICdnService cdnService
@inject ILeagueUserService leagueUserService

@{
    ViewData["Title"] = Model.league.Name;
    Layout = "_HomeLayout";
    var returnUrl = Url.Action("Home", "Leagues", new { Model.league.ID });
}

@section Styles {
    <link href="/css/league_home.css" rel="Stylesheet" type="text/css" />
    <link href="/css/leagueuser/powerrank.css" type="text/css" rel="stylesheet" />
}

@section Body_Banner {
    <img class="body-banner-image" src="@Model.league.Game.BannerPicUrl" />
    <h1 class="body-banner-title">@Model.league.Name</h1>
}

@section User_Content_Left {
    <h3 align="center">Power Rankings</h3>
    @{
        var users = Model.league.Members.ToList();
        users.Sort();
        for (var i = 0; i < users.Count; i++)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{
                    var viewModel = await PowerRankViewModel.Create(users[i], Model.user, cdnService, leagueUserService, false);
                    @await Html.PartialAsync("~/Views/LeagueUsers/Partials/PowerRank.cshtml", viewModel)
                    if (users[i].ID == Model.league.KingID)
                    {
                        <div class="reign">
                            @{
                                var weeks = Model.league.GetKingReignWeeks();
                                if (weeks > 0)
                                {
                                    <span>reign of @weeks week@(weeks > 1 ? "s" : "") began on @Model.league.KingReignStart.ToShortDateString()</span>
                                }
                                else
                                {
                                    <span>new reign started on @Model.league.KingReignStart.ToShortDateString()</span>
                                }
                            }
                        </div>
                    }
                }
            </div>
        }
    }
}

@section User_Content_Middle {
    <h3 align="center">Recent Activity</h3>
    @if (Model.recentSets != null)
    {
        var i = 0;
        foreach (var set in Model.recentSets)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{ var viewModel = new SetCollapsedViewModel(set, null, returnUrl); }
                @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
            </div>
            ++i;
        }
    }
    else
    {
        <div align="center">
            <span>No recent activity</span>
        </div>
    }
}

@section User_Content_Right {
    <h3 align="center">Seasons</h3>
    <div class="season-actions">
        <button onclick="createSeason(@Model.league.ID)">Create Season</button>
        <span>or view</span>
        <select id="seasons-dropdown">
            @foreach (var season in Model.league.Seasons)
            {
                if (season.ID == Model.selectedSeason.ID)
                {
                    <option value="season-@season.ID" selected>@season.DisplayName</option>
                }
                else
                {
                    <option value="season-@season.ID">@season.DisplayName</option>
                }
            }
        </select>
    </div>

    <div class="season-info">
        <span>Total: <span id="seasonStatus.totalSetCount"></span></span>
        <span>Completed: <span id="seasonStatus.completedCount"></span></span>
        <span>Available: <span id="seasonStatus.availableCount"></span></span>
        <span>Overdue: <span id="seasonStatus.overdueCount"></span></span>
    </div>

    @if (Model.selectedSeason != null)
    {
        var overdueSets = Model.selectedSeason.GetOverdueSets();
        if (overdueSets.Any())
        {
            <h4>Overdue</h4>
            var i = 0;
            foreach (var set in overdueSets)
            {
                var row = i % 2 == 0 ? "row-even" : "row-odd";
                <div class="@row">
                    @{ var viewModel = new SetCollapsedViewModel(set, null, returnUrl); }
                    @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
                </div>
                ++i;
            }
        }

        var availableSets = Model.selectedSeason.GetAvailableSets();
        if (availableSets.Any())
        {
            <h4>Available</h4>
            var i = 0;
            foreach (var set in Model.selectedSeason.GetAvailableSets())
            {
                var row = i % 2 == 0 ? "row-even" : "row-odd";
                <div class="@row">
                    @{ var viewModel = new SetCollapsedViewModel(set, null, returnUrl); }
                    @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
                </div>
                ++i;
            }
        }
    }
    else
    {
        <span>No seasons</span>
    }
}

@section Scripts {
    <script type="text/javascript" src="@Url.Content("/js/season.js")"></script>
    <script type="text/javascript" src="@Url.Content("/js/leagues.js")"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            @{ var seasonID = Model.selectedSeason == null ? -1 : Model.selectedSeason.ID; }
            if (@seasonID >= 0) {
                getSeasonStatus(@seasonID);
            }
        });
    </script>
}
