@using Climb.Services
@using Climb.ViewModels
@using Climb.ViewModels.LeagueUsers
@model LeagueHomeViewModel
@inject CdnService cdnService
@inject ILeagueUserService leagueUserService

@{
    ViewData["Title"] = Model.league.Name;
    Layout = "_HomeLayout";
    var returnUrl = Url.Action("Home", "Leagues", new
    {
        Model.league.ID
    });
}

@section Styles {
    <link href="/css/league_home.css" rel="Stylesheet" type="text/css"/>
    <link href="/css/leagueuser/powerrank.css" type="text/css" rel="stylesheet"/>
}

@section Body_Banner {
    <img class="body-banner-image" src="@Model.league.Game.BannerPicUrl"/>
    <h1 class="body-banner-title">@Model.league.Name</h1>
}

@section User_Content_Left {
    <h3 align="center">Power Rankings</h3>
    @{
        var i = 0;
        if(Model.king != null)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            ++i;
            <div id="reign">
                <div class="members">@Model.reign</div>
                <div class="@row">
                    @{
                        var viewModel = await PowerRankViewModel.Create(Model.king, Model.user, cdnService, leagueUserService, false);
                        @await Html.PartialAsync("~/Views/LeagueUsers/Partials/PowerRank.cshtml", viewModel)
                    }
                </div>
            </div>
        }

        if(Model.nonkingMembers.Any())
        {
            <div id="members-nonking">
                <div class="members">Contenders</div>
                @foreach(var member in Model.nonkingMembers)
                {
                    var row = i % 2 == 0 ? "row-even" : "row-odd";
                    ++i;
                    <div class="@row">
                        @{
                            var viewModel = await PowerRankViewModel.Create(member, Model.user, cdnService, leagueUserService, false);
                            @await Html.PartialAsync("~/Views/LeagueUsers/Partials/PowerRank.cshtml", viewModel)
                        }
                    </div>
                }
            </div>
        }

        if(Model.newMembers.Any())
        {
            <div id="members-new">
                <div class="members">Newcomers</div>
                @foreach(var member in Model.newMembers)
                {
                    var row = i % 2 == 0 ? "row-even" : "row-odd";
                    ++i;
                    <div class="@row">
                        @{
                            var viewModel = await PowerRankViewModel.Create(member, Model.user, cdnService, leagueUserService, false);
                            @await Html.PartialAsync("~/Views/LeagueUsers/Partials/PowerRank.cshtml", viewModel)
                        }
                    </div>
                }
            </div>
        }
    }
}

@section User_Content_Middle {
    <h3 align="center">Recent Activity</h3>
    @if(Model.recentSets != null)
    {
        var i = 0;
        foreach(var set in Model.recentSets)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{ var viewModel = SetCollapsedViewModel.Create(set, Model.viewingLeagueUser, returnUrl); }
                @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
            </div>
            ++i;
        }
    }
    else
    {
        <div align="center">
            <span>No recent activity</span>
        </div>
    }
}

@section User_Content_Right {

    <h3 align="center">Sets</h3>

    @if(Model.overdueSets?.Any() ?? false)
    {
        <h4>Overdue</h4>
        var i = 0;
        foreach(var set in Model.overdueSets)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{ var viewModel = SetCollapsedViewModel.Create(set, Model.viewingLeagueUser, returnUrl); }
                @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
            </div>
            ++i;
        }
    }

    @if(Model.availableSets?.Any() ?? false)
    {
        <h4>Available</h4>
        var i = 0;
        foreach(var set in Model.availableSets)
        {
            var row = i % 2 == 0 ? "row-even" : "row-odd";
            <div class="@row">
                @{ var viewModel = SetCollapsedViewModel.Create(set, Model.viewingLeagueUser, returnUrl); }
                @Html.Partial("/Views/Sets/Partials/Collapsed.cshtml", viewModel)
            </div>
            ++i;
        }
    }
}

@section Scripts {
<script type="text/javascript" src="@Url.Content("/js/season.js")"></script>
<script type="text/javascript" src="@Url.Content("/js/leagues.js")"></script>
}
